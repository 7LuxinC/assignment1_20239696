/* generated by info.scce.dime.generator.scheme.ControllerGenerator */
package de.ls5.dywa.generated.controller.dime__HYPHEN_MINUS__models.app;

import de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.LMS;
import de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.LMSImpl;
import de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.LMSSearch;

import java.util.Arrays;
import java.util.stream.Collectors;

@javax.enterprise.context.RequestScoped
public class LMSControllerImpl implements LMSController {
	private static final org.slf4j.Logger LOGGER =  org.slf4j.LoggerFactory.getLogger(LMSController.class);

	@javax.persistence.PersistenceContext
	private javax.persistence.EntityManager entityManager;

	@javax.inject.Inject
	private de.ls5.dywa.generated.util.DomainFileController domainFileController;

@javax.inject.Inject //referenceMap
private de.ls5.dywa.generated.controller.dime__HYPHEN_MINUS__models.app.ConcreteUserController concreteUserController;

    
    @Override
	public LMS read(final java.lang.Long id) {

		 LMS result = entityManager.find(LMSImpl.class, id);
		 	// delegate read until entity is found;
		return result;
	}

    @Override
	public java.util.List<LMS> findByProperties(LMS searchObject) {
		if (searchObject instanceof LMSSearch) {
			LMSSearch casted = (LMSSearch) searchObject;

			java.util.List<LMS> list = buildSimpleQuery(casted.queryAttributes(), casted.queryListAttributes(), true).getResultList().stream().map(LMS::casted).collect(Collectors.toList());

			return list;
		} else {
			throw new java.lang.IllegalArgumentException("Search object required.");
		}
	}

	@Override
	public LMS findFirstByProperties(LMS searchObject) {
		if (searchObject instanceof LMSSearch) {
			LMSSearch casted = (LMSSearch) searchObject;
			java.util.List<LMS> results = new java.util.ArrayList<LMS>();
			results.addAll(buildSimpleQuery(casted.queryAttributes(), casted.queryListAttributes(),false).setMaxResults(1).getResultList());
			return results.isEmpty() ? null : results.get(0);
		} else throw new java.lang.IllegalArgumentException("Search object required.");
	}

	@Override
	public java.util.Set<LMS> fetch() {
		return new java.util.HashSet<LMS>(buildSimpleQuery(null, null,false).getResultList());
	}

	@Override
	public java.util.Set<LMS> fetchByName(final java.lang.String name) {
		java.util.Map<String, Object> map = new java.util.HashMap<>();
		map.put("name_", name);
		java.util.HashSet<LMS> result = new java.util.HashSet<>(buildSimpleQuery(map, null,false).getResultList());
		return result;
	}

		@Override
		public LMS create(java.lang.String name) {
			LMSImpl entity = new LMSImpl();
			entity.setDywaName(name);
			entityManager.persist(entity);
			return entity;
		}

		@Override
		public LMS createTransient(java.lang.String name) {
			LMSImpl entity = new LMSImpl();
			entity.setDywaName(name);
			return entity;
		}

	@Override
	public LMS createSearchObject(java.lang.String name) {
		return new LMSSearch(name);
	}

	@Override
	public java.util.Set<LMS> fetchWithSubtypes() {
		java.util.Set<LMS> list = buildSimpleQuery(null,null, true).getResultList().stream().map(LMS::casted).collect(Collectors.toSet());

		return list;
	}

	@Override
	public void delete(LMS entity) {

		if (entity instanceof LMSImpl) {
			LMSImpl impl = (LMSImpl) entity;
			entityManager.remove(impl);
		}
		// delegate delete
	}
	
	@Override
	public void deleteWithIncomingReferences(LMS entityToDelete) {

		
		// Delete references from type ConcreteUser
			de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.ConcreteUser searchConcreteUser;
			searchConcreteUser = new de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.ConcreteUserSearch();	
				searchConcreteUser.setlMS(entityToDelete);
			for (de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.ConcreteUser queryResult : this.concreteUserController.findByProperties(searchConcreteUser)) {
				queryResult.setlMS(null);
			}
		delete(entityToDelete);
	}
	
	private javax.persistence.TypedQuery<LMSImpl> buildSimpleQuery(java.util.Map<String, Object> attributeMap, java.util.Map<String, java.util.List> listAttributeMap, boolean withInherited) {
		java.lang.StringBuilder queryStr = new java.lang.StringBuilder("SELECT e FROM LMSImpl e WHERE (true="+withInherited+" OR e.inheritance_ = false)");
		if (attributeMap != null) {
			for (java.util.Map.Entry<String, Object> entry : attributeMap.entrySet()) {
				queryStr.append(" AND e." + entry.getKey() + " = :" + entry.getKey().replaceAll("\\W", ""));
			}
		}
		if (listAttributeMap != null) {
			for (java.util.Map.Entry<String, java.util.List> entry : listAttributeMap.entrySet()) {
				if (entry.getValue() == null || entry.getValue().isEmpty()) {
					queryStr.append(" AND e." + entry.getKey() + " IS EMPTY");
				} else {
					String prefix = entry.getKey().replaceAll("\\W", "");
					for (int i = 0, s = entry.getValue().size(); i < s; i++) {
						queryStr.append(" AND :" + prefix + i + " MEMBER OF e." + entry.getKey());
					}
				}
			}
		}
		queryStr.append(" ORDER BY id_ DESC");
		javax.persistence.TypedQuery<LMSImpl> query = entityManager.createQuery(queryStr.toString(), LMSImpl.class);
		if (attributeMap != null) {
			for (java.util.Map.Entry<String, Object> entry : attributeMap.entrySet()) {
				query.setParameter(entry.getKey().replaceAll("\\W", ""), entry.getValue());
			}
		}
		if (listAttributeMap != null) {
			for (java.util.Map.Entry<String, java.util.List> entry : listAttributeMap.entrySet()) {
				if (entry.getValue() != null && !entry.getValue().isEmpty()) {
					String prefix = entry.getKey().replaceAll("\\W", "");
					for (int i = 0, s = entry.getValue().size(); i < s; i++) {
						query.setParameter(prefix + i, entry.getValue().get(i));
					}
				}
			}
		}
		query.setHint(org.hibernate.jpa.QueryHints.HINT_CACHEABLE,true);
		return query;
	}
}
